// !Пошаговое конструирование приложения:
/**
 * 1. находим кнопку ($start)'начать' - и вешаем на нее обрабочик событий и функцию которая начнет нашу игру (startGame)
 * 2. Функция 'startGame' - в свою очередь выполняет манипуляции с DOM-элементами:
 *      - убирает кнопу(добавление класса 'hide')
 *      - перекрашивает наш квадратик
 *      - и запускает функцию 'renderBox' - которая генерирует рандомные квадратики по которым мы будем кликать в будущем
 * 3. Функция 'renderBox' :
 *      - создаем внутри элемент 'div' - записываем в переменную box
 *      - прописываем необходимые стили (пока статические)
 *      - вставляем этот элемент с помощью метода 'insertAdjacentElement'
 *      во внутрь нашего блока $game : $game.insertAdjacentElement("afterbegin", box);
 * 4. Чтобы при клике на квадратик мы понимали что это именно нужный элемент(квадратик) - добавим элементу box- setAttribute (box.setAttribute("data-box", "true"););
 * 5. Теперь воспользуемся делешироваеним событий, а именно, на наш главный блок '$game' / $game.addEventListener("click", handleBoxClick) /  - добавим обработчик событий, который будет следить за кликами внутри себя, и если клик произошел по нашему блоку 'box' - тогда выполнять дальнейшие десйтвия, то есть убирать старый квадратик и вызывать функцию renderBox()- для создания квадратика заново
 * 6. Создаем переменную score = 0; наш счетчик правильных попаданий на квадратик
 * 7. добавляем его внутрь функции handleBoxClick, для подсчета количества кликов по квадрату
 * 8. Так же внутрь функции renderBox() - мы добавим очитску нашего блока перед созданием в нем элемента :  ( $game.innerHTML = "";) - перед созданием и добавлением квадрата внутрь элемента
 * 9. Создаем функцию getRandom(min, max) - которая генерирует нам рандомное число в нашем диапазоне
 * 10. Внутри нашего renderBox() :
 *      - создаем переменную boxSize и присваиваем ей результат функции getRandom(min, max) с необходимыми значениями минимального и максимально размера квадрата;
 *      -  создаем переменную gameSize - которая является результатом функции $game.getBoundingClientRect() - получаем все размеры нужного нам элемента($game)
 *? Element.getBoundingClientRect()
 *? Метод Element.getBoundingClientRect() возвращает размер элемента и его позицию относительно viewport (часть страницы, показанная на экране, и которую мы видим).
 *      - создаем переменные   maxTop = gameSize.height - boxSize ; и  maxLeft = gameSize.width - boxSize;
 *      - теперь значение этих перменных вставляем уже внутрь стилей нашего квадрати,
 *        для того чтобы происходили изменения в создании данного квадрата
 * 11. Создаем перемнную isGameStarted - которая следит за тем , запущена ли игра
 * 12. Так же делаем изменение в DOM - при клике на начало игры делаем меняем местами(изменяем видимость элементво) - $timeHeader и $resultHeader ...  Вставляем этот обмен в начало игры, и в конец игры с изначальными значениями видимости
 * 13. Внутри функции startGame() - создаем setInterval - внутри которой происходит просчет каждой милисекунды и каждое изменение выводится в нужное поле DOM-элемента
 * 14. Так же созданы функция :
 *      -setGameTime() -функция которая принимает(берет) значение секунд из инпута и при старте программы начинает отчет
 *      -setGameScore() - функция которая принимает результат score и выводит в нужный нам DOM-элемент это значение
 * 15. Создали функцию endGame() - которая при условии что setInterval() - закончил отчет и число секунд равно 0, вызывается  данная функция:
 *      - она переключает значение переменной isGameStarted - на false
 *      - выполяет функцию setGameScore() - которая показывает результат score
 *      - изменяет разетку HTML -  в первоначальное состтояние, для того чтобы игру можно было запускать снова
 * 16. Чтобы добавить рандомное изменение цвета квадратика, мы создали массив цветов colors и с помощью функции getRandom(0,colors.length) - вытаскиваем рандомное значение индекса массива и вставляем поле с этим значением внутрь стиля backgroundColor - данного эелемента
 *
 */
